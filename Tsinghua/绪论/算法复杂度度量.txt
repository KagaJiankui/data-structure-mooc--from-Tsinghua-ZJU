时间复杂度
	随着输入规模的扩大，算法的执行时间将如何增长？执行时间的这一变化趋势可表示为输入规模的一个函数，称作该算法的时间复杂度（time
complexity） 从保守估计的角度出发，在规模为n的所有输入中选择执行时间最长者作为T(n)， 并以T(n)度量该算法的时间复杂度.
		
		大O记号：我们首先关注T(n)的渐进上界。为此可引入所谓“大O记号”（big-O notation） 。具体地，若存在正的常数c和函数f(n)，使得对任何n >> 2都有
			T(n)≤c∙f(n)
		则可认为在n足够大之后， f(n)给出了T(n)增长速度的一个渐进上界。此时，记之为：
			T(n) = O(f(n))
		由这一定义，可以导出大O记号地以下性质:
			对于任一常数c > 0，有O(f(n)) = O(c∙f(n))
			对于任意常数a > b > 0，有O(n^a + n^b) = O(n^a)
		前一性质意味着，在大O记号的意义下，函数各项正的常系数可以忽略并等同于1。后一性质则意味着，多项式中的低次项均可忽略，只需保留最高次项
		不妨将T(n)定义为算法所执行基本操作的总次数。也就是说， T(n)决定于组成算法的所有语句各自的执行次数，以及其中所含基本操作的数目。
		
		
		大Ω记号:为了对算法的复杂度最好情况做出估计，需要借助另一个记号。如果存在正的常数c和函数
		g(n)，使得对于任何n >> 2都有
			T(n)≤c∙g(n)
		就可以认为，在n足够大之后， g(n)给出了T(n)的一个渐进下界。此时，我们记之为：
			T(n) = Ω(g(n))
		
		
		大Θ记号：果存在正的常数c1 < c2和函数h(n)，使得对于任何n >> 2都有
			c1∙h(n)≤T(n)≤c2∙h(n)
		就可以认为在n足够大之后， h(n)给出了T(n)的一个确界。此时，我们记之为：
			T(n) =Θ(h(n))

空间复杂度:除了执行时间的长短，算法所需存储空间的多少也是衡量其性能的一个重要方面， 此即所谓的空间复杂度（space complexity）
就渐进复杂度的意义而言，在任一算法的任何一次运行过程中所消耗的存储空间， 都不会多于其间所执行基本操作的累计次数。		
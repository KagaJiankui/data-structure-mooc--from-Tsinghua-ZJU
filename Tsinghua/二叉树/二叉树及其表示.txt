结构有着不计其数的变种， 在算法理论以及实际应用中，它们都扮演着最为关键的角色。之所以如此，是因得益于其独特而又普适的逻辑结构。树是一种分层结构，而层次化这一特征几乎蕴含于所有事物及其联系当中，成为其本质属性之一。

有根树:
	从图论的角度看，树等价于连通无环图。因此与一般的图相同，树也由一组顶点（vertex）以及联接与其间的若干条边（edge） 组成。在计算机科学中，往往还会在此基础上，再指定某
一特定顶点，并称之为根（root） 。

深度与层次:
	由树的连通性，每一节点与根之间都有一条路径相联； 而根据树的无环性，由根通往每个节
	点的路径必然唯一。
	
	沿每个节点v到根r的唯一通路所经过边的数目，称作v的深度（depth） ，记作depth(v)。依据深度排序，可对所有节点做分层归类。特别地，约定根
	节点的深度depth(r) = 0，故属于第0层
	
祖先后代与子树:
	任一节点v在通往树根沿途所经过的每个节点都是其祖先（ancestor） ， v是它们的后代（descendant） 。特别地， v的祖先/后代包括其本身， 而v本身以外的祖先
	/后代称作真祖先（proper ancestor） /真后代（properdescendant）
	若节点u是 v的祖先 且恰好 比 v高出 一层 ， 则称 u是 v的父亲（parent）， v是u的孩子（child）
	v的孩子总数，称作其度数或度（degree），记作deg(v)。 无孩子的节点称作叶节点（leaf） ，包括根在内的其余节点皆为内部节点（internal node） 。
	
高度:
	树T中所有节点深度的最大值称作该树的高度（height） ，记作height(T)。
	推而广之，任一节点v所对应子树subtree(v)的高度， 亦称作该节点的高度，记作height(v)。
	特别地， 全树的高度亦即其根节点r的高度， height(T) = height(r)
	
二叉树:
	二叉树（binary tree）每个节点的度数均不超过2。特别地，不含一度节点的二叉树称作真二叉树（proper binary tree）
	
多叉树:
	一般地，树中各节点的孩子数目并不确定。每个节点的孩子均不超过k个的有根树，称作k叉树（k-ary tree） 
	
有序多叉树=二叉树:
	首先建立起从多叉树到二叉树的某种转换关系， 并使得在此转换的意义下， 任一多叉树都等价于某棵二叉树.为了保证作为多叉树特例的二叉树有足够的能力表示任何一棵多叉树，我们只需给多
	叉树增加一项约束条件同一节点的所有孩子之间必须具有某一线性次序